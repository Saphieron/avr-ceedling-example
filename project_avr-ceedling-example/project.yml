---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: FALSE
  :use_auxiliary_dependencies: TRUE
  :use_mocks: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: vendor/ceedling
  options_paths: []
  :default_tasks:
    - test:all

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:
  - :mcu_compiler: atmega2560
  # - :mcu_avrdude: m2560
  - :f_cpu: 16000000UL 
  - :upload_port: /dev/ttyACM1  #################Port via you programm the device
  - :listen_port: /dev/ttyACM1  #################Port you listen via UART for the test results. can be the same with arduino boards.
  - :objcopy: avr-objcopy
  - :programmer: wiring
  - :baud: 19200

:extension:
  :executable: .elf

:paths:
  :test:
    - +:test/**
    - -:test/support
  # :test_include:
  #   - +:test/support/
  :source:
    - src/**
  :support:
    - test/support

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :commmon: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
  :defines:
    - CMOCK_MEM_STATIC
    - CMOCK_MEM_SIZE=2048

:gcov:
    :html_report_type: basic

:tools:
  :test_compiler:
    :executable: avr-gcc
    :name: 'avr compiler, used for testing'
    :arguments:
      - -c ${1}
      - -o ${2}
      - -DF_CPU=#{ENV['F_CPU']}
      - -mmcu=#{ENV['MCU_COMPILER']}
      - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE               #expands to -I search paths
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR   #expands to -I search paths
      - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR
      - -Wall
      - -fpack-struct
      - -fshort-enums
      - -ffunction-sections
      - -fdata-sections
      - -std=c99
      - -funsigned-char
      - -funsigned-bitfields
      - -DBAUD=#{ENV['BAUD']}
      - -O2
  :test_linker:
    :executable: avr-gcc
    :arguments:
      - -Wl,-Map,MemMapping.map
      - -mmcu=#{ENV['MCU_COMPILER']}
      - -L"$": COLLECTION_PATHS_SUPPORT
      - ${1}
      - -o ${2}
      - -lUartSupport
  :test_fixture:
    :executable: python
    :name: 'script to upload to target and receive test results'
    :arguments:
      - "../support_files/target_uploader.py"
      - -p=#{ENV['MCU_COMPILER']}
      - -c=#{ENV['PROGRAMMER']}
      - -U=#{ENV['UPLOAD_PORT']}
      - -F=${1}
      - -L=#{ENV['LISTEN_PORT']}
      - -B=#{ENV['BAUD']}
      - -D

:unity: #itty bitty processor & toolchain with limited test execution options
  :defines:
    - UNITY_INCLUDE_CONFIG_H

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "${1}"  # or "-L ${1}" for example
  :common: &common_libraries []
  :test:
    - *common_libraries
  :release:
    - *common_libraries

:plugins:
  :load_paths:
    - vendor/ceedling/plugins
  :enabled:
    #- stdout_pretty_tests_report
    #- stdout_gtestlike_tests_report
    #- stdout_ide_tests_report
    - module_generator
...
